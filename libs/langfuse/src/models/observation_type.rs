/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ObservationType {
    #[serde(rename = "SPAN")]
    Span,
    #[serde(rename = "GENERATION")]
    Generation,
    #[serde(rename = "EVENT")]
    Event,

}

impl std::fmt::Display for ObservationType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Span => write!(f, "SPAN"),
            Self::Generation => write!(f, "GENERATION"),
            Self::Event => write!(f, "EVENT"),
        }
    }
}

impl Default for ObservationType {
    fn default() -> ObservationType {
        Self::Span
    }
}

